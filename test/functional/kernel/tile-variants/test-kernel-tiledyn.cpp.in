//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2016-22, Lawrence Livermore National Security, LLC
// and RAJA project contributors. See the RAJA/LICENSE file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

//
// test/include headers
//
#include "RAJA_test-base.hpp"
#include "RAJA_test-camp.hpp"
#include "RAJA_test-index-types.hpp"
#include "RAJA_test-kernel-tile-size.hpp"

// for data types
#include "RAJA_test-reduce-types.hpp"
#include "RAJA_test-forall-data.hpp"

//
// Header for tests in ./tests directory
//
// Note: CMake adds ./tests as an include dir for these tests.
//
#include "test-kernel-tile-@TILE_TYPE@.hpp"


//
// Exec pols for kernel tile tests
//

using SequentialKernelTileExecPols =
  camp::list<

    RAJA::KernelPolicy<
      RAJA::statement::Tile<1, RAJA::tile_dynamic<1>, RAJA::loop_exec,
        RAJA::statement::Tile<0, RAJA::tile_dynamic<0>, RAJA::loop_exec,
          RAJA::statement::For<1, RAJA::loop_exec,
            RAJA::statement::For<0, RAJA::loop_exec,
              RAJA::statement::Lambda<0, RAJA::Segs<0,1>, RAJA::Params<>>
            >
          >
        >
      >
    >,

    RAJA::KernelPolicy<
      RAJA::statement::Tile<1, RAJA::tile_dynamic<1>, RAJA::seq_exec,
        RAJA::statement::Tile<0, RAJA::tile_dynamic<0>, RAJA::seq_exec,
          RAJA::statement::For<1, RAJA::seq_exec,
            RAJA::statement::For<0, RAJA::seq_exec,
              RAJA::statement::Lambda<0, RAJA::Segs<0,1>, RAJA::Params<>>
            >
          >
        >
      >
    >,

    RAJA::KernelPolicy<
      RAJA::statement::Tile<1, RAJA::tile_dynamic<1>, RAJA::seq_exec,
        RAJA::statement::Tile<0, RAJA::tile_dynamic<0>, RAJA::loop_exec,
          RAJA::statement::For<1, RAJA::seq_exec,
            RAJA::statement::For<0, RAJA::loop_exec,
              RAJA::statement::Lambda<0, RAJA::Segs<0,1>, RAJA::Params<>>
            >
          >
        >
      >
    >,

    RAJA::KernelPolicy<
      RAJA::statement::Tile<1, RAJA::tile_dynamic<1>, RAJA::loop_exec,
        RAJA::statement::Tile<0, RAJA::tile_dynamic<0>, RAJA::seq_exec,
          RAJA::statement::For<1, RAJA::loop_exec,
            RAJA::statement::For<0, RAJA::seq_exec,
              RAJA::statement::Lambda<0, RAJA::Segs<0,1>, RAJA::Params<>>
            >
          >
        >
      >
    >

  >;

#if defined(RAJA_ENABLE_OPENMP)

using OpenMPKernelTileExecPols =
  camp::list<

    RAJA::KernelPolicy<
      RAJA::statement::Tile<1, RAJA::tile_dynamic<1>, RAJA::seq_exec,
        RAJA::statement::Tile<0, RAJA::tile_dynamic<0>, RAJA::omp_parallel_for_exec,
          RAJA::statement::For<1, RAJA::seq_exec,
            RAJA::statement::For<0, RAJA::omp_parallel_for_exec,
              RAJA::statement::Lambda<0, RAJA::Segs<0,1>, RAJA::Params<>>
            >
          >
        >
      >
    >,

    RAJA::KernelPolicy<
      RAJA::statement::Tile<1, RAJA::tile_dynamic<1>, RAJA::seq_exec,
        RAJA::statement::Tile<0, RAJA::tile_dynamic<0>, RAJA::seq_exec,
          RAJA::statement::Collapse<RAJA::omp_parallel_collapse_exec,
            RAJA::ArgList<0,1>,
            RAJA::statement::Lambda<0, RAJA::Segs<0,1>, RAJA::Params<>>
          >
        >
      >
    >

  >;

#endif  // RAJA_ENABLE_OPENMP

#if defined(RAJA_ENABLE_TARGET_OPENMP)

using OpenMPTargetKernelTileExecPols =
  camp::list<

    RAJA::KernelPolicy<
      RAJA::statement::Tile<1, RAJA::tile_dynamic<1>, RAJA::seq_exec,
        RAJA::statement::Tile<0, RAJA::tile_dynamic<0>, RAJA::omp_parallel_for_exec,
          RAJA::statement::For<1, RAJA::seq_exec,
            RAJA::statement::For<0, RAJA::omp_target_parallel_for_exec<16>,
              RAJA::statement::Lambda<0, RAJA::Segs<0,1>, RAJA::Params<>>
            >
          >
        >
      >
    >,

    RAJA::KernelPolicy<
      RAJA::statement::Tile<1, RAJA::tile_dynamic<1>, RAJA::seq_exec,
        RAJA::statement::Tile<0, RAJA::tile_dynamic<0>, RAJA::seq_exec,
          RAJA::statement::Collapse<RAJA::omp_target_parallel_collapse_exec,
            RAJA::ArgList<0,1>,
            RAJA::statement::Lambda<0, RAJA::Segs<0,1>, RAJA::Params<>>
          >
        >
      >
    >

  >;

#endif  // RAJA_ENABLE_TARGET_OPENMP

#if defined(RAJA_ENABLE_TBB)

using TBBKernelTileExecPols =
  camp::list<

    RAJA::KernelPolicy<
      RAJA::statement::Tile<1, RAJA::tile_dynamic<1>, RAJA::tbb_for_exec,
        RAJA::statement::Tile<0, RAJA::tile_dynamic<0>, RAJA::tbb_for_exec,
          RAJA::statement::For<1, RAJA::tbb_for_exec,
            RAJA::statement::For<0, RAJA::tbb_for_exec,
              RAJA::statement::Lambda<0, RAJA::Segs<0,1>, RAJA::Params<>>
            >
          >
        >
      >
    >,

    RAJA::KernelPolicy<
      RAJA::statement::Tile<1, RAJA::tile_dynamic<1>, RAJA::tbb_for_exec,
        RAJA::statement::Tile<0, RAJA::tile_dynamic<0>, RAJA::seq_exec,
          RAJA::statement::For<1, RAJA::tbb_for_exec,
            RAJA::statement::For<0, RAJA::seq_exec,
              RAJA::statement::Lambda<0, RAJA::Segs<0,1>, RAJA::Params<>>
            >
          >
        >
      >
    >,

    RAJA::KernelPolicy<
      RAJA::statement::Tile<1, RAJA::tile_dynamic<1>, RAJA::seq_exec,
        RAJA::statement::Tile<0, RAJA::tile_dynamic<0>, RAJA::tbb_for_exec,
          RAJA::statement::For<1, RAJA::seq_exec,
            RAJA::statement::For<0, RAJA::tbb_for_exec,
              RAJA::statement::Lambda<0, RAJA::Segs<0,1>, RAJA::Params<>>
            >
          >
        >
      >
    >

  >;

#endif  // RAJA_ENABLE_TBB

// Dynamic tiling not yet implemented for Cuda or Hip
//#if defined(RAJA_ENABLE_CUDA)
//
//using CudaKernelTileExecPols =
//  camp::list<
//
//    RAJA::KernelPolicy<
//      RAJA::statement::CudaKernel<
//        RAJA::statement::Tile<1, RAJA::tile_dynamic<1>, RAJA::cuda_block_x_loop,
//          RAJA::statement::Tile<0, RAJA::tile_dynamic<0>, RAJA::cuda_block_y_direct,
//            RAJA::statement::For<1, RAJA::cuda_thread_x_loop,
//              RAJA::statement::For<0, RAJA::cuda_thread_y_direct,
//                RAJA::statement::Lambda<0, RAJA::Segs<0,1>, RAJA::Params<>>
//              >
//            >
//          >
//        >
//      >
//    >,
//
//    RAJA::KernelPolicy<
//      RAJA::statement::Tile<1, RAJA::tile_dynamic<1>, RAJA::seq_exec,
//        RAJA::statement::For<1, RAJA::seq_exec,
//          RAJA::statement::CudaKernel<
//            RAJA::statement::Tile<0, RAJA::tile_dynamic<0>, RAJA::cuda_block_x_loop,
//              RAJA::statement::For<0, RAJA::cuda_thread_x_loop,
//                RAJA::statement::Lambda<0, RAJA::Segs<0,1>, RAJA::Params<>>
//              >
//            >
//          >
//        >
//      >
//    >,
//
//    RAJA::KernelPolicy<
//      RAJA::statement::CudaKernel<
//        RAJA::statement::Tile<1, RAJA::tile_dynamic<1>, RAJA::seq_exec,
//          RAJA::statement::Tile<0, RAJA::tile_dynamic<0>, RAJA::cuda_block_x_loop,
//            RAJA::statement::For<1, RAJA::seq_exec,
//              RAJA::statement::For<0, RAJA::cuda_thread_x_loop,
//                RAJA::statement::Lambda<0, RAJA::Segs<0,1>, RAJA::Params<>>
//              >
//            >
//          >
//        >
//      >
//    >
//
//  >;
//
//#endif  // RAJA_ENABLE_CUDA
//
//#if defined(RAJA_ENABLE_HIP)
//
//using HipKernelTileExecPols =
//  camp::list<
//
//    RAJA::KernelPolicy<
//      RAJA::statement::HipKernel<
//        RAJA::statement::Tile<1, RAJA::tile_dynamic<1>, RAJA::hip_block_x_loop,
//          RAJA::statement::Tile<0, RAJA::tile_dynamic<0>, RAJA::hip_block_y_direct,
//            RAJA::statement::For<1, RAJA::hip_thread_x_loop,
//              RAJA::statement::For<0, RAJA::hip_thread_y_direct,
//                RAJA::statement::Lambda<0, RAJA::Segs<0,1>, RAJA::Params<>>
//              >
//            >
//          >
//        >
//      >
//    >,
//
//    RAJA::KernelPolicy<
//      RAJA::statement::Tile<1, RAJA::tile_dynamic<1>, RAJA::seq_exec,
//        RAJA::statement::For<1, RAJA::seq_exec,
//          RAJA::statement::HipKernel<
//            RAJA::statement::Tile<0, RAJA::tile_dynamic<0>, RAJA::hip_block_x_loop,
//              RAJA::statement::For<0, RAJA::hip_thread_x_loop,
//                RAJA::statement::Lambda<0, RAJA::Segs<0,1>, RAJA::Params<>>
//              >
//            >
//          >
//        >
//      >
//    >,
//
//    RAJA::KernelPolicy<
//      RAJA::statement::HipKernel<
//        RAJA::statement::Tile<1, RAJA::tile_dynamic<1>, RAJA::seq_exec,
//          RAJA::statement::Tile<0, RAJA::tile_dynamic<0>, RAJA::hip_block_x_loop,
//            RAJA::statement::For<1, RAJA::seq_exec,
//              RAJA::statement::For<0, RAJA::hip_thread_x_loop,
//                RAJA::statement::Lambda<0, RAJA::Segs<0,1>, RAJA::Params<>>
//              >
//            >
//          >
//        >
//      >
//    >
//
//  >;
//
//#endif  // RAJA_ENABLE_HIP

//
// Cartesian product of types used in parameterized tests
//
using @TILE_BACKEND@KernelTileTypes =
  Test< camp::cartesian_product<IdxTypeList,
                                ReduceDataTypeList,
                                @TILE_BACKEND@ResourceList,
                                @TILE_BACKEND@KernelTileExecPols>>::Types;

//
// Instantiate parameterized test
//
INSTANTIATE_TYPED_TEST_SUITE_P(@TILE_BACKEND@,
                               KernelTile@TILE_TYPE@Test,
                               @TILE_BACKEND@KernelTileTypes);
