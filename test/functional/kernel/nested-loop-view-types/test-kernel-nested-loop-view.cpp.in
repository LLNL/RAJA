//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2016-22, Lawrence Livermore National Security, LLC
// and RAJA project contributors. See the RAJA/COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

//
// test/include headers
//
#include "RAJA_test-base.hpp"
#include "RAJA_test-camp.hpp"
#include "RAJA_test-index-types.hpp"

#include "RAJA_test-forall-data.hpp"

//
// Header for tests in ./tests directory
//
// Note: CMake adds ./tests as an include dir for these tests.
//
#include "test-kernel-nested-loop-@TESTTYPE@@DIM@.hpp"

// Sequential execution policy types
using SequentialKernel2DExecPols = camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::loop_exec,
      RAJA::statement::For<1, RAJA::loop_exec,
        RAJA::statement::Lambda<0>
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::Collapse<RAJA::seq_exec, RAJA::ArgList<0, 1>,
      RAJA::statement::Lambda<0>
    >
  >

>;

using SequentialKernel3DExecPols = camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::loop_exec,
      RAJA::statement::For<1, RAJA::loop_exec,
        RAJA::statement::For<2, RAJA::loop_exec,
          RAJA::statement::Lambda<0>
        >
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::Collapse<RAJA::seq_exec, RAJA::ArgList<0, 1, 2>,
      RAJA::statement::Lambda<0>
    >
  >

>;

#if defined(RAJA_ENABLE_OPENMP)
using OpenMPKernel2DExecPols = camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::omp_parallel_for_exec,
      RAJA::statement::For<1, RAJA::loop_exec,
        RAJA::statement::Lambda<0>
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::Collapse<RAJA::omp_parallel_collapse_exec, RAJA::ArgList<0, 1>,
      RAJA::statement::Lambda<0>
    >
  >

>;

using OpenMPKernel3DExecPols = camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::omp_parallel_for_exec,
      RAJA::statement::For<1, RAJA::loop_exec,
        RAJA::statement::For<2, RAJA::loop_exec,
          RAJA::statement::Lambda<0>
        >
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::Collapse<RAJA::omp_parallel_collapse_exec, RAJA::ArgList<0, 1, 2>,
      RAJA::statement::Lambda<0>
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_OPENMP)

#if defined(RAJA_ENABLE_TBB)
using TBBKernel2DExecPols =
camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::tbb_for_exec,
      RAJA::statement::For<1, RAJA::seq_exec,
        RAJA::statement::Lambda<0>
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::tbb_for_static< >,
      RAJA::statement::For<1, RAJA::seq_exec,
        RAJA::statement::Lambda<0>
      >
    >
  >

>;

using TBBKernel3DExecPols =
camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::tbb_for_exec,
      RAJA::statement::For<1, RAJA::seq_exec,
        RAJA::statement::For<2, RAJA::seq_exec,
          RAJA::statement::Lambda<0>
        >
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::tbb_for_static< >,
      RAJA::statement::For<1, RAJA::seq_exec,
        RAJA::statement::For<2, RAJA::seq_exec,
          RAJA::statement::Lambda<0>
        >
      >
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_TBB)

#if defined(RAJA_ENABLE_TARGET_OPENMP)
using OpenMPTargetKernel2DExecPols =
camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::Collapse<RAJA::omp_target_parallel_collapse_exec,
                              RAJA::ArgList<0, 1>,
      RAJA::statement::Lambda<0>
    >
  >

>;

using OpenMPTargetKernel3DExecPols =
camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::Collapse<RAJA::omp_target_parallel_collapse_exec,
                              RAJA::ArgList<0, 1, 2>,
      RAJA::statement::Lambda<0>
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_TARGET_OPENMP)

#if defined(RAJA_ENABLE_CUDA)
using CudaKernel2DExecPols =
camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::CudaKernel<
      RAJA::statement::For<0, RAJA::cuda_thread_x_loop,
        RAJA::statement::For<1, RAJA::cuda_thread_y_loop,
          RAJA::statement::Lambda<0>
        >
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::CudaKernelFixed<8*8,
      RAJA::statement::Tile<0, RAJA::tile_fixed<8>,
                               RAJA::cuda_block_y_direct,
        RAJA::statement::Tile<1, RAJA::tile_fixed<8>,
                                 RAJA::cuda_block_x_direct,
          RAJA::statement::For<0, RAJA::cuda_thread_y_direct,   // outer
            RAJA::statement::For<1, RAJA::cuda_thread_x_direct, // inner
              RAJA::statement::Lambda<0>
            >
          >
        >
      >
    >
  >

>;

using CudaKernel3DExecPols =
camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::CudaKernel<
      RAJA::statement::For<0, RAJA::cuda_thread_x_loop,
        RAJA::statement::For<1, RAJA::cuda_thread_y_loop,
          RAJA::statement::For<2, RAJA::cuda_thread_z_loop,
            RAJA::statement::Lambda<0>
          >
        >
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::CudaKernelFixed<4*8*8,
      RAJA::statement::Tile<0, RAJA::tile_fixed<4>,
                               RAJA::cuda_block_z_direct,
        RAJA::statement::Tile<1, RAJA::tile_fixed<8>,
                                 RAJA::cuda_block_y_direct,
          RAJA::statement::Tile<2, RAJA::tile_fixed<8>,
                                   RAJA::cuda_block_x_direct,
            RAJA::statement::For<0, RAJA::cuda_thread_z_direct,     // outer
              RAJA::statement::For<1, RAJA::cuda_thread_y_direct,   // middle
                RAJA::statement::For<2, RAJA::cuda_thread_x_direct, // inner
                  RAJA::statement::Lambda<0>
                >
              >
            >
          >
        >
      >
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_CUDA)

#if defined(RAJA_ENABLE_HIP)
using HipKernel2DExecPols =
camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::HipKernel<
      RAJA::statement::For<0, RAJA::hip_thread_x_loop,
        RAJA::statement::For<1, RAJA::hip_thread_y_loop,
          RAJA::statement::Lambda<0>
        >
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::HipKernelFixed<8*8,
      RAJA::statement::Tile<0, RAJA::tile_fixed<8>,
                               RAJA::hip_block_y_direct,
        RAJA::statement::Tile<1, RAJA::tile_fixed<8>,
                                 RAJA::hip_block_x_direct,
          RAJA::statement::For<0, RAJA::hip_thread_y_direct,   // outer
            RAJA::statement::For<1, RAJA::hip_thread_x_direct, // inner
              RAJA::statement::Lambda<0>
            >
          >
        >
      >
    >
  >

>;

using HipKernel3DExecPols =
camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::HipKernel<
      RAJA::statement::For<0, RAJA::hip_thread_x_loop,
        RAJA::statement::For<1, RAJA::hip_thread_y_loop,
          RAJA::statement::For<2, RAJA::hip_thread_z_loop,
            RAJA::statement::Lambda<0>
          >
        >
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::HipKernelFixed<4*8*8,
      RAJA::statement::Tile<0, RAJA::tile_fixed<4>,
                               RAJA::hip_block_z_direct,
        RAJA::statement::Tile<1, RAJA::tile_fixed<8>,
                                 RAJA::hip_block_y_direct,
          RAJA::statement::Tile<2, RAJA::tile_fixed<8>,
                                   RAJA::hip_block_x_direct,
            RAJA::statement::For<0, RAJA::hip_thread_z_direct,     // outer
              RAJA::statement::For<1, RAJA::hip_thread_y_direct,   // middle
                RAJA::statement::For<2, RAJA::hip_thread_x_direct, // inner
                  RAJA::statement::Lambda<0>
                >
              >
            >
          >
        >
      >
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_HIP)

#if defined(RAJA_ENABLE_SYCL)
using SyclKernel2DExecPols =
camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::SyclKernel<
      RAJA::statement::For<0, RAJA::sycl_local_0_loop,
        RAJA::statement::For<1, RAJA::sycl_local_1_loop,
          RAJA::statement::Lambda<0>
        >
      >
    >
  >

>;

using SyclKernel3DExecPols =
camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::SyclKernel<
      RAJA::statement::For<0, RAJA::sycl_local_0_loop,
        RAJA::statement::For<1, RAJA::sycl_local_1_loop,
          RAJA::statement::For<2, RAJA::sycl_local_2_loop,
            RAJA::statement::Lambda<0>
          >
        >
      >
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_SYCL)


//
// Cartesian product of types used in parameterized tests
//
using @BACKEND@KernelNestesLoop@TESTTYPE@@DIM@Types =
  Test< camp::cartesian_product<SignedIdxTypeList,
                                @BACKEND@ResourceList,
                                @BACKEND@Kernel@DIM@ExecPols>>::Types;

//
// Instantiate parameterized tests
//
INSTANTIATE_TYPED_TEST_SUITE_P(@BACKEND@,
                               KernelNestedLoop@TESTTYPE@@DIM@Test,
                               @BACKEND@KernelNestesLoop@TESTTYPE@@DIM@Types);
