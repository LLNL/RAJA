//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2016-22, Lawrence Livermore National Security, LLC
// and RAJA project contributors. See the RAJA/LICENSE file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

//
// test/include headers
//
#include "RAJA_test-base.hpp"
#include "RAJA_test-camp.hpp"
#include "RAJA_test-index-types.hpp"

#include "RAJA_test-forall-data.hpp"

//
// Header for tests in ./tests directory
//
// Note: CMake adds ./tests as an include dir for these tests.
#include "test-kernel-single-loop-@TESTTYPE@.hpp"

//
// Note that a separate test file/executable is generated for each tile size
// defined via CMake variable 'TILESIZE' defined in CMakeLists.txt file. 
// The reason for doing it this way is that the tests require the tile size
// in the exec policy must match the tile size value defined here. Defining
// multiple tile sizes in a list here and using that to define a cartesian
// product of test cases would break that assumpiton.
//
// Tile size value must match that used in exec policy.
//
using TileSizes = camp::list< Value<@TILESIZE@> >;

//
// Num reduction policies must match num exec policies.
//
using SequentialReducePols = camp::list< RAJA::seq_reduce >; 

// Sequential execution policy types
using SequentialKernelForICountExecPols = camp::list< 
    
  RAJA::KernelPolicy<
    RAJA::statement::Tile<0, RAJA::tile_fixed<@TILESIZE@>, RAJA::seq_exec,
      RAJA::statement::ForICount<0, RAJA::statement::Param<0>, RAJA::loop_exec,
        RAJA::statement::Lambda<0>
      >
    >
  >

>;

using SequentialKernelTileTCountExecPols = camp::list<
   
  RAJA::KernelPolicy<
    RAJA::statement::TileTCount<0, RAJA::statement::Param<0>, RAJA::tile_fixed<@TILESIZE@>, RAJA::seq_exec,
      RAJA::statement::For<0, RAJA::loop_exec,
        RAJA::statement::Lambda<0>
      >
    >
  >

>;

#if defined(RAJA_ENABLE_OPENMP)
//
// Num reduction policies must match num exec policies.
//
using OpenMPReducePols = camp::list< RAJA::omp_reduce >; 

using OpenMPKernelForICountExecPols = camp::list< 
    
  RAJA::KernelPolicy<
    RAJA::statement::Tile<0, RAJA::tile_fixed<@TILESIZE@>, RAJA::loop_exec,
      RAJA::statement::ForICount<0, RAJA::statement::Param<0>, RAJA::omp_parallel_for_exec,
        RAJA::statement::Lambda<0>
      >
    >
  >

>;

using OpenMPKernelTileTCountExecPols = camp::list< 
    
  RAJA::KernelPolicy<
    RAJA::statement::TileTCount<0, RAJA::statement::Param<0>, RAJA::tile_fixed<@TILESIZE@>, RAJA::loop_exec,
      RAJA::statement::For<0, RAJA::omp_parallel_for_exec,
        RAJA::statement::Lambda<0>
      >
    >
  >
   
>;
#endif  // if defined(RAJA_ENABLE_OPENMP)

#if defined(RAJA_ENABLE_TBB)
//
// Num reduction policies must match num exec policies.
//
using TBBReducePols = camp::list< RAJA::tbb_reduce >; 

using TBBKernelForICountExecPols = camp::list< 

  RAJA::KernelPolicy<
    RAJA::statement::Tile<0, RAJA::tile_fixed<@TILESIZE@>, RAJA::loop_exec,
      RAJA::statement::ForICount<0, RAJA::statement::Param<0>, RAJA::tbb_for_exec,
        RAJA::statement::Lambda<0>
      >
    >
  >

>;

using TBBKernelTileTCountExecPols = camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::TileTCount<0, RAJA::statement::Param<0>, RAJA::tile_fixed<@TILESIZE@>, RAJA::loop_exec,
      RAJA::statement::For<0, RAJA::tbb_for_exec,
        RAJA::statement::Lambda<0>
      >
    >
  >
   
>;
#endif  // if defined(RAJA_ENABLE_TBB)

#if defined(RAJA_ENABLE_TARGET_OPENMP)
//
// Num reduction policies must match num exec policies.
//
using OpenMPTargetReducePols = camp::list< RAJA::omp_target_reduce >; 

using OpenMPTargetKernelForICountExecPols = camp::list< 

  RAJA::KernelPolicy<
    RAJA::statement::Tile<0, RAJA::tile_fixed<@TILESIZE@>, RAJA::omp_target_parallel_for_exec_nt,
      RAJA::statement::ForICount<0, RAJA::statement::Param<0>, RAJA::loop_exec,
        RAJA::statement::Lambda<0>
      >
    >
  >

>;

using OpenMPTargetKernelTileTCountExecPols = camp::list< 

  RAJA::KernelPolicy<
    RAJA::statement::TileTCount<0, RAJA::statement::Param<0>, RAJA::tile_fixed<@TILESIZE@>, RAJA::omp_target_parallel_for_exec_nt,
      RAJA::statement::For<0, RAJA::loop_exec,
        RAJA::statement::Lambda<0>
      >
    >
  >
   
>;
#endif  // if defined(RAJA_ENABLE_TARGET_OPENMP)

#if defined(RAJA_ENABLE_CUDA)
//
// Num reduction policies must match num exec policies.
//
using CudaReducePols = camp::list< RAJA::cuda_reduce >; 

using CudaKernelForICountExecPols = camp::list< 

  RAJA::KernelPolicy< 
    RAJA::statement::CudaKernel<
      RAJA::statement::Tile<0, RAJA::tile_fixed<@TILESIZE@>, RAJA::cuda_block_x_loop,
        RAJA::statement::ForICount<0, RAJA::statement::Param<0>, RAJA::cuda_thread_x_direct, 
          RAJA::statement::Lambda<0>
        >
      >
    >
  >

>;

using CudaKernelTileTCountExecPols = camp::list< 

  RAJA::KernelPolicy<
    RAJA::statement::CudaKernel<
      RAJA::statement::TileTCount<0, RAJA::statement::Param<0>, RAJA::tile_fixed<@TILESIZE@>, RAJA::cuda_block_x_loop,
        RAJA::statement::For<0, RAJA::cuda_thread_x_direct,
          RAJA::statement::Lambda<0>
        >
      >
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_CUDA)

#if defined(RAJA_ENABLE_HIP)
//
// Num reduction policies must match num exec policies.
//
using HipReducePols = camp::list< RAJA::hip_reduce >; 

using HipKernelForICountExecPols = camp::list<

  RAJA::KernelPolicy< 
    RAJA::statement::HipKernel<
      RAJA::statement::Tile<0, RAJA::tile_fixed<@TILESIZE@>, RAJA::hip_block_x_loop,
        RAJA::statement::ForICount<0, RAJA::statement::Param<0>, RAJA::hip_thread_x_direct, 
          RAJA::statement::Lambda<0>
        >
      >
    >
  >

>;

using HipKernelTileTCountExecPols = camp::list< 

  RAJA::KernelPolicy<
    RAJA::statement::HipKernel<
      RAJA::statement::TileTCount<0, RAJA::statement::Param<0>, RAJA::tile_fixed<@TILESIZE@>, RAJA::hip_block_x_loop,
        RAJA::statement::For<0, RAJA::hip_thread_x_direct,
          RAJA::statement::Lambda<0>
        >
      >
    >
  > 

>;
#endif  // if defined(RAJA_ENABLE_HIP)

#if defined(RAJA_ENABLE_SYCL)
//
// Num reduction policies must match num exec policies.
//
using SyclReducePols = camp::list< RAJA::sycl_reduce >;

using SyclKernelForICountExecPols = camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::SyclKernel<
      RAJA::statement::Tile<0, RAJA::tile_fixed<@TILESIZE@>, RAJA::sycl_group_0_loop,
        RAJA::statement::ForICount<0, RAJA::statement::Param<0>, RAJA::sycl_local_0_direct,
          RAJA::statement::Lambda<0>
        >
      >
    >
  >

>;

using SyclKernelTileTCountExecPols = camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::SyclKernel<
      RAJA::statement::TileTCount<0, RAJA::statement::Param<0>, RAJA::tile_fixed<@TILESIZE@>, RAJA::sycl_group_0_loop,
        RAJA::statement::For<0, RAJA::sycl_local_0_direct,
          RAJA::statement::Lambda<0>
        >
      >
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_SYCL)

//
// Cartesian product of types used in parameterized tests
//
using @BACKEND@KernelSingleLoop@TESTTYPE@Types =
  Test< camp::cartesian_product<IdxTypeList,
                                @BACKEND@Kernel@TESTTYPE@ExecPols,
                                @BACKEND@ReducePols,
                                TileSizes> >::Types;

//
// Instantiate parameterized tests
//
INSTANTIATE_TYPED_TEST_SUITE_P(@BACKEND@,
                               KernelSingleLoop@TESTTYPE@Test,
                               @BACKEND@KernelSingleLoop@TESTTYPE@Types);
