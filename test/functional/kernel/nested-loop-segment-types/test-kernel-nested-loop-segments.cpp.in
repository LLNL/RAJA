//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2016-22, Lawrence Livermore National Security, LLC
// and RAJA project contributors. See the RAJA/LICENSE file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

//
// test/include headers
//
#include "RAJA_test-base.hpp"
#include "RAJA_test-camp.hpp"
#include "RAJA_test-index-types.hpp"

#include "RAJA_test-forall-data.hpp"


//
// Header for tests in ./tests directory
//
// Note: CMake adds ./tests as an include dir for these tests.
//
#include "test-kernel-nested-loops-segment-types.hpp"


// Sequential execution policy types
using SequentialKernelExecPols = camp::list<
    
  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::loop_exec,
      RAJA::statement::For<1, RAJA::seq_exec,
        RAJA::statement::For<2, RAJA::loop_exec,
          RAJA::statement::Lambda<0, RAJA::Segs<0, 1, 2>>
        >
      >
    >
  >

>;

#if defined(RAJA_ENABLE_OPENMP)
using OpenMPKernelExecPols = camp::list<
    
  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::omp_parallel_for_exec,
      RAJA::statement::For<1, RAJA::seq_exec,
        RAJA::statement::For<2, RAJA::loop_exec,
          RAJA::statement::Lambda<0, RAJA::Segs<0, 1, 2>>
        >
      >
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_OPENMP)

#if defined(RAJA_ENABLE_TBB)
using TBBKernelExecPols = camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::tbb_for_exec,
      RAJA::statement::For<1, RAJA::seq_exec,
        RAJA::statement::For<2, RAJA::loop_exec,
          RAJA::statement::Lambda<0, RAJA::Segs<0, 1, 2>>
        >
      >
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_TBB)

#if defined(RAJA_ENABLE_TARGET_OPENMP)
using OpenMPTargetKernelExecPols = camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::omp_target_parallel_for_exec<8>,
      RAJA::statement::For<1, RAJA::seq_exec,
        RAJA::statement::For<2, RAJA::seq_exec,
          RAJA::statement::Lambda<0, RAJA::Segs<0, 1, 2>>
        >
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::Collapse<RAJA::omp_target_parallel_collapse_exec,
                               RAJA::ArgList<0, 1, 2>,
       RAJA::statement::Lambda<0>
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_TARGET_OPENMP)

#if defined(RAJA_ENABLE_CUDA)
using CudaKernelExecPols = camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::CudaKernelAsync<
      RAJA::statement::For<0, RAJA::cuda_block_z_loop,
        RAJA::statement::For<1, RAJA::cuda_block_y_loop,
          RAJA::statement::For<2, RAJA::cuda_thread_x_loop,
            RAJA::statement::Lambda<0, RAJA::Segs<0, 1, 2>>
          >
        >
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::CudaKernel<
      RAJA::statement::For<0, RAJA::cuda_thread_x_loop,
        RAJA::statement::For<1, RAJA::seq_exec,
          RAJA::statement::For<2, RAJA::seq_exec,
            RAJA::statement::Lambda<0, RAJA::Segs<0, 1, 2>>
          >
        >
      >
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_CUDA)

#if defined(RAJA_ENABLE_HIP)
using HipKernelExecPols = camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::HipKernelAsync<
      RAJA::statement::For<0, RAJA::hip_block_z_loop,
        RAJA::statement::For<1, RAJA::hip_block_y_loop,
          RAJA::statement::For<2, RAJA::hip_thread_x_loop,
            RAJA::statement::Lambda<0, RAJA::Segs<0, 1, 2>>
          >
        >
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::HipKernel<
      RAJA::statement::For<0, RAJA::hip_thread_x_loop,
        RAJA::statement::For<1, RAJA::seq_exec,
          RAJA::statement::For<2, RAJA::seq_exec,
            RAJA::statement::Lambda<0, RAJA::Segs<0, 1, 2>>
          >
        >
      >
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_SYCL)

#if defined(RAJA_ENABLE_SYCL)
using SyclKernelExecPols = camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::SyclKernelAsync<
      RAJA::statement::For<0, RAJA::sycl_group_2_loop,
        RAJA::statement::For<1, RAJA::sycl_group_1_loop,
          RAJA::statement::For<2, RAJA::sycl_local_0_loop,
            RAJA::statement::Lambda<0, RAJA::Segs<0, 1, 2>>
          >
        >
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::SyclKernel<
      RAJA::statement::For<0, RAJA::sycl_local_0_loop,
        RAJA::statement::For<1, RAJA::seq_exec,
          RAJA::statement::For<2, RAJA::seq_exec,
            RAJA::statement::Lambda<0, RAJA::Segs<0, 1, 2>>
          >
        >
      >
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_SYCL)


//
// Cartesian product of types used in parameterized tests
//
using @BACKEND@KernelNestedLoopsSegmentTypes =
  Test< camp::cartesian_product<IdxTypeList,
                                @BACKEND@ResourceList,
                                @BACKEND@KernelExecPols>>::Types;

//
// Instantiate parameterized tests
//
INSTANTIATE_TYPED_TEST_SUITE_P(@BACKEND@,
                               KernelNestedLoopsSegmentTypesTest,
                               @BACKEND@KernelNestedLoopsSegmentTypes);
