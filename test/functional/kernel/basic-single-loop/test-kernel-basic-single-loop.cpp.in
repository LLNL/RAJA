//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2016-22, Lawrence Livermore National Security, LLC
// and RAJA project contributors. See the RAJA/LICENSE file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

//
// test/include headers
//
#include "RAJA_test-base.hpp"
#include "RAJA_test-camp.hpp"
#include "RAJA_test-index-types.hpp"

#include "RAJA_test-forall-data.hpp"

//
// Header for tests in ./tests directory
//
// Note: CMake adds ./tests as an include dir for these tests.
//
#include "test-kernel@RESOURCE@basic-single-loop-segments.hpp"

// Sequential execution policy types
using SequentialKernelExecPols = camp::list< 
    
  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::seq_exec,
      RAJA::statement::Lambda<0, RAJA::Segs<0>>
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::loop_exec,
      RAJA::statement::Lambda<0, RAJA::Segs<0>>
    >
  >

>;

#if defined(RAJA_ENABLE_OPENMP)
using OpenMPKernelExecPols = camp::list< 
    
  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::omp_parallel_for_exec,
      RAJA::statement::Lambda<0, RAJA::Segs<0>>
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::omp_parallel_for_static_exec< >,
      RAJA::statement::Lambda<0, RAJA::Segs<0>>
    >
  >,

#if defined(RAJA_TEST_EXHAUSTIVE)
  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::omp_parallel_for_static_exec<4>,
      RAJA::statement::Lambda<0, RAJA::Segs<0>>
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::omp_parallel_for_dynamic_exec<2>,
      RAJA::statement::Lambda<0, RAJA::Segs<0>>
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::omp_parallel_for_guided_exec<3>,
      RAJA::statement::Lambda<0, RAJA::Segs<0>>
    >
  >,
#endif

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::omp_parallel_for_exec,
      RAJA::statement::Lambda<0, RAJA::Segs<0>>
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_OPENMP)

#if defined(RAJA_ENABLE_TBB)
using TBBKernelExecPols = 
camp::list< 

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::tbb_for_exec,
      RAJA::statement::Lambda<0, RAJA::Segs<0>>
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::tbb_for_static< >,
      RAJA::statement::Lambda<0, RAJA::Segs<0>>
    >
  >,

#if defined(RAJA_TEST_EXHAUSTIVE)
  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::tbb_for_static< 2 >,
      RAJA::statement::Lambda<0, RAJA::Segs<0>>
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::tbb_for_static< 4 >,
      RAJA::statement::Lambda<0, RAJA::Segs<0>>
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::tbb_for_static< 8 >,
      RAJA::statement::Lambda<0, RAJA::Segs<0>>
    >
  >
#endif

  RAJA::KernelPolicy<
    RAJA::statement::For<0, RAJA::tbb_for_dynamic,
      RAJA::statement::Lambda<0, RAJA::Segs<0>>
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_TBB)

#if defined(RAJA_ENABLE_TARGET_OPENMP)
using OpenMPTargetKernelExecPols =
camp::list< 

  RAJA::KernelPolicy<
     RAJA::statement::For<0, RAJA::omp_target_parallel_for_exec<4>,
       RAJA::statement::Lambda<0, RAJA::Segs<0>>
     >
  >,

  RAJA::KernelPolicy<
     RAJA::statement::For<0, RAJA::omp_target_parallel_for_exec_nt,
       RAJA::statement::Lambda<0, RAJA::Segs<0>>
     >
  >

>;
#endif  // if defined(RAJA_ENABLE_TARGET_OPENMP)

#if defined(RAJA_ENABLE_CUDA)
using CudaKernelExecPols = 
camp::list< 

  RAJA::KernelPolicy<
    RAJA::statement::CudaKernel<
      RAJA::statement::For<0, RAJA::cuda_thread_x_loop,
        RAJA::statement::Lambda<0, RAJA::Segs<0>>
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::CudaKernel<
      RAJA::statement::For<0, RAJA::cuda_thread_y_loop,
        RAJA::statement::Lambda<0, RAJA::Segs<0>>
      >
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_CUDA)

#if defined(RAJA_ENABLE_HIP)
using HipKernelExecPols = 
camp::list< 

  RAJA::KernelPolicy<
    RAJA::statement::HipKernel<
      RAJA::statement::For<0, RAJA::hip_thread_x_loop,  
        RAJA::statement::Lambda<0, RAJA::Segs<0>>
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::HipKernel<
      RAJA::statement::For<0, RAJA::hip_thread_y_loop,
        RAJA::statement::Lambda<0, RAJA::Segs<0>>
      > 
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_HIP)

#if defined(RAJA_ENABLE_SYCL)
using SyclKernelExecPols =
camp::list<

  RAJA::KernelPolicy<
    RAJA::statement::SyclKernel<
      RAJA::statement::For<0, RAJA::sycl_local_0_loop,
        RAJA::statement::Lambda<0, RAJA::Segs<0>>
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::SyclKernel<
      RAJA::statement::For<0, RAJA::sycl_local_1_loop,
        RAJA::statement::Lambda<0, RAJA::Segs<0>>
      >
    >
  >,

  RAJA::KernelPolicy<
    RAJA::statement::SyclKernel<
      RAJA::statement::For<0, RAJA::sycl_local_2_loop,
        RAJA::statement::Lambda<0, RAJA::Segs<0>>
      >
    >
  >

>;
#endif  // if defined(RAJA_ENABLE_SYCL)

//
// Cartesian product of types used in parameterized tests
//
using @BACKEND@KernelBasicSingleLoopTypes =
  Test< camp::cartesian_product<StrongIdxTypeList,
                                @BACKEND@ResourceList,
                                @BACKEND@KernelExecPols>>::Types;

//
// Instantiate parameterized tests
//
INSTANTIATE_TYPED_TEST_SUITE_P(@BACKEND@,
                               KernelBasicSingleLoopTest,
                               @BACKEND@KernelBasicSingleLoopTypes);
