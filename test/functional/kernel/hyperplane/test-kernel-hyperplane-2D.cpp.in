//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2016-23, Lawrence Livermore National Security, LLC
// and RAJA project contributors. See the RAJA/LICENSE file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

//
// test/include headers
//
#include "RAJA_test-base.hpp"
#include "RAJA_test-camp.hpp"
#include "RAJA_test-index-types.hpp"
#include "RAJA_test-kernel-tile-size.hpp"

#include "RAJA_test-reducepol.hpp"

// for data types
#include "RAJA_test-reduce-types.hpp"
#include "RAJA_test-forall-data.hpp"

//
// Header for tests in ./tests directory
//
// Note: CMake adds ./tests as an include dir for these tests.
//
#include "test-kernel-hyperplane-@TEST_TYPE@.hpp"

//
// Exec pols for kernel tile tests
//

using SequentialKernelHyperplaneExecPols =
  camp::list<

    RAJA::KernelPolicy<
      RAJA::statement::For<0, RAJA::seq_exec,
        RAJA::statement::Hyperplane<2, RAJA::seq_exec, RAJA::ArgList<1>, RAJA::seq_exec,
          RAJA::statement::Lambda<0>
        >
      >
    >,

    RAJA::KernelPolicy<
      RAJA::statement::For<0, RAJA::seq_exec,
        RAJA::statement::Hyperplane<1, RAJA::seq_exec, RAJA::ArgList<2>, RAJA::seq_exec,
          RAJA::statement::Lambda<0>
        >
      >
    >

  >;

#if defined(RAJA_ENABLE_OPENMP)

using OpenMPKernelHyperplaneExecPols =
  camp::list< 

    RAJA::KernelPolicy<
      RAJA::statement::For<0, RAJA::omp_parallel_for_exec,
        RAJA::statement::Hyperplane<1, RAJA::seq_exec, RAJA::ArgList<2>, RAJA::seq_exec,
          RAJA::statement::Lambda<0>
        >
      >
    >,

    RAJA::KernelPolicy<
      RAJA::statement::For<0, RAJA::omp_parallel_for_exec,
        RAJA::statement::Hyperplane<2, RAJA::seq_exec, RAJA::ArgList<1>, RAJA::seq_exec,
          RAJA::statement::Lambda<0>
        >
      >
    >
  >;

#endif  // RAJA_ENABLE_OPENMP

#if defined(RAJA_ENABLE_TARGET_OPENMP)

using OpenMPTargetKernelHyperplaneExecPols =
  camp::list< 

    RAJA::KernelPolicy<
      RAJA::statement::For<0, RAJA::omp_target_parallel_for_exec<16>,
        RAJA::statement::Hyperplane<1, RAJA::seq_exec, RAJA::ArgList<2>, RAJA::seq_exec,
          RAJA::statement::Lambda<0>
        >
      >
    >,

    RAJA::KernelPolicy<
      RAJA::statement::For<0, RAJA::omp_target_parallel_for_exec<16>,
        RAJA::statement::Hyperplane<2, RAJA::seq_exec, RAJA::ArgList<1>, RAJA::seq_exec,
          RAJA::statement::Lambda<0>
        >
      >
    >
  >;

#endif  // RAJA_ENABLE_TARGET_OPENMP

#if defined(RAJA_ENABLE_TBB)

using TBBKernelHyperplaneExecPols =
  camp::list< 

    RAJA::KernelPolicy<
      RAJA::statement::For<0, RAJA::tbb_for_exec,
        RAJA::statement::Hyperplane<1, RAJA::seq_exec, RAJA::ArgList<2>, RAJA::seq_exec,
          RAJA::statement::Lambda<0>
        >
      >
    >,

    RAJA::KernelPolicy<
      RAJA::statement::For<0, RAJA::tbb_for_exec,
        RAJA::statement::Hyperplane<2, RAJA::seq_exec, RAJA::ArgList<1>, RAJA::seq_exec,
          RAJA::statement::Lambda<0>
        >
      >
    >
  >;

#endif  // RAJA_ENABLE_TBB

#if defined(RAJA_ENABLE_CUDA)

using CudaKernelHyperplaneExecPols =
  camp::list< 

    RAJA::KernelPolicy<
      RAJA::statement::CudaKernel<
        RAJA::statement::For<0, RAJA::cuda_block_x_loop,
          RAJA::statement::For<1, RAJA::cuda_thread_x_direct,
            RAJA::statement::Hyperplane<2, RAJA::seq_exec, RAJA::ArgList<1>,
              RAJA::statement::Lambda<0>,
              RAJA::statement::CudaSyncThreads
            >
          >
        >
      >
    >,

    RAJA::KernelPolicy<
      RAJA::statement::CudaKernel<
        RAJA::statement::For<0, RAJA::cuda_block_x_loop,
          RAJA::statement::For<1, RAJA::cuda_thread_x_loop,
            RAJA::statement::Hyperplane<2, RAJA::seq_exec, RAJA::ArgList<1>,
              RAJA::statement::Lambda<0>,
              RAJA::statement::CudaSyncThreads
            >
          >
        >
      >
    >

  >;

#endif  // RAJA_ENABLE_CUDA

#if defined(RAJA_ENABLE_HIP)

using HipKernelHyperplaneExecPols =
  camp::list<

    RAJA::KernelPolicy<
      RAJA::statement::HipKernel<
        RAJA::statement::For<0, RAJA::hip_block_x_loop,
          RAJA::statement::For<1, RAJA::hip_thread_x_direct,
            RAJA::statement::Hyperplane<2, RAJA::seq_exec, RAJA::ArgList<1>,
              RAJA::statement::Lambda<0>,
              RAJA::statement::HipSyncThreads
            >
          >
        >
      >
    >,

    RAJA::KernelPolicy<
      RAJA::statement::HipKernel<
        RAJA::statement::For<0, RAJA::hip_block_x_loop,
          RAJA::statement::For<1, RAJA::hip_thread_x_loop,
            RAJA::statement::Hyperplane<2, RAJA::seq_exec, RAJA::ArgList<1>,
              RAJA::statement::Lambda<0>,
              RAJA::statement::HipSyncThreads
            >
          >
        >
      >
    >

  >;

#endif  // RAJA_ENABLE_HIP

#if defined(RAJA_ENABLE_SYCL)
// no existing SYCL implementation of Hyperplane
#endif  // RAJA_ENABLE_SYCL

//
// Cartesian product of types used in parameterized tests
//
using @BACKEND@KernelHyperplane =
  Test< camp::cartesian_product<IdxTypeList,
                                ReduceDataTypeList,
                                @BACKEND@ResourceList,
                                @BACKEND@KernelHyperplaneExecPols,
                                @BACKEND@ReducePols>>::Types;

//
// Instantiate parameterized test
//
INSTANTIATE_TYPED_TEST_SUITE_P(@BACKEND@,
                               KernelHyperplane@TEST_TYPE@Test,
                               @BACKEND@KernelHyperplane);
