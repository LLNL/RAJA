/*!
 ******************************************************************************
 *
 * \file
 *
 * \brief   Header file for basic RAJA configuration options.
 * 
 *          This file contains platform-specific parameters that control 
 *          aspects of compilation of application code using RAJA. These
 *          parameters specify: SIMD unit width, data alignment information,
 *          inline directives, etc. 
 *
 *          IMPORTANT: These options are set by CMake and depend on the options
 *          passed to it.
 *
 *          IMPORTANT: Exactly one e RAJA_COMPILER_* option must be defined to
 *          ensure correct behavior.
 *
 *          Definitions in this file will propagate to all RAJA header files.
 *
 ******************************************************************************
 */

#ifndef RAJA_config_HXX
#define RAJA_config_HXX

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2016, Lawrence Livermore National Security, LLC.
//
// Produced at the Lawrence Livermore National Laboratory
//
// LLNL-CODE-689114
//
// All rights reserved.
//
// This file is part of RAJA.
//
// For additional details, please also read RAJA/LICENSE.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// * Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the disclaimer below.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the disclaimer (as noted below) in the
//   documentation and/or other materials provided with the distribution.
//
// * Neither the name of the LLNS/LLNL nor the names of its contributors may
//   be used to endorse or promote products derived from this software without
//   specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL SECURITY,
// LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
// POSSIBILITY OF SUCH DAMAGE.
//
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

#cmakedefine RAJA_USE_STL
#cmakedefine RAJA_ENABLE_FT 

#define @RAJA_FP@

#define @RAJA_PTR@

#define @RAJA_COMPILER@

/*
 * Programming models
 */

#cmakedefine RAJA_ENABLE_OPENMP
#cmakedefine RAJA_ENABLE_CILK
#cmakedefine RAJA_ENABLE_CUDA
#cmakedefine RAJA_ENABLE_CLANG_CUDA
#cmakedefine RAJA_ENABLE_NESTED

/*
 * Timer options
 */

#cmakedefine RAJA_USE_CHRONO
#cmakedefine RAJA_USE_GETTIME
#cmakedefine RAJA_USE_CLOCK
#cmakedefine RAJA_USE_CYCLE


namespace RAJA {


/*!
 ******************************************************************************
 *
 * \brief RAJA software version number.
 *
 ******************************************************************************
 */
const int RAJA_VERSION_MAJOR = @RAJA_VERSION_MAJOR@;
const int RAJA_VERSION_MINOR = @RAJA_VERSION_MINOR@;
const int RAJA_VERSION_PATCHLEVEL = @RAJA_VERSION_PATCHLEVEL@;


/*!
 ******************************************************************************
 *
 * \brief Useful macros.
 *
 ******************************************************************************
 */

//
//  Platform-specific constants for range index set and data alignment:
//
//     RANGE_ALIGN - alignment of begin/end indices in range segments
//                   (i.e., starting index and length of range segments 
//                    constructed by index set builder methods will 
//                    be multiples of this value)
//
//     RANGE_MIN_LENGTH - used in index set builder methods
//                        as min length of range segments (an integer multiple
//                        of RANGE_ALIGN)
//
//     DATA_ALIGN - used in compiler-specific intrinsics and typedefs
//                  to specify alignment of data, loop bounds, etc.;
//                  units of "bytes" 

const int RANGE_ALIGN = @RAJA_RANGE_ALIGN@;
const int RANGE_MIN_LENGTH = @RAJA_RANGE_MIN_LENGTH@;
const int DATA_ALIGN = @RAJA_DATA_ALIGN@;
const int COHERENCE_BLOCK_SIZE = @RAJA_COHERENCE_BLOCK_SIZE@;

//
//  Compiler-specific definitions for inline directives, data alignment
//  intrinsics, and SIMD vector pragmas
//
//  Variables for compiler instrinsics, directives, typedefs
//
//     RAJA_INLINE - macro to enforce method inlining
//
//     RAJA_SIMD - macro to apply compiler-specific pragma that encourages
//                 compiler to SIMD vectorize loop even if it may not
//                 normally
//
//     RAJA_SIMDFORCE - macro to apply compiler-specific pragma that forces
//                      compiler to SIMD vectorize loop (should override
//                      compiler heuristics, cost models, etc.)
//
//     RAJA_NOSIMD - macro to apply compiler-specific pragma to prevent
//                   SIMD loop vectorization even if it is legal to do so
//
//     RAJA_ALIGN_DATA(<variable>) - macro to express alignment of data, 
//                                   loop bounds, etc.
//
//     RAJA_ALIGNED_ATTR(<alignment>) - macro to express type or variable 
//                   alignments
//

#if defined(RAJA_COMPILER_GNU)
//
// Configuration options for GNU compilers
//

#define RAJA_INLINE inline  __attribute__((always_inline))
#define RAJA_SIMD       // RAJA_PRAGMA(GCC ivdep) -> internal comp err w/4.9.3
#define RAJA_SIMDFORCE  RAJA_PRAGMA(simd)
#define RAJA_NOSIMD     // GNU compiler does not provide this option
#if defined(RAJA_ENABLE_CUDA)
#define RAJA_ALIGN_DATA(d)
#else
#define RAJA_ALIGN_DATA(d) __builtin_assume_aligned(d, DATA_ALIGN)
#endif
#define RAJA_ALIGNED_ATTR(N) __attribute__((aligned(N)))


#elif defined(RAJA_COMPILER_INTEL) 
//
// Configuration options for Intel compilers
//

#define RAJA_INLINE inline  __attribute__((always_inline))
#define RAJA_SIMD       RAJA_PRAGMA(ivdep)
#define RAJA_SIMDFORCE  RAJA_PRAGMA(simd)
#define RAJA_NOSIMD     RAJA_PRAGMA(novector)
#if defined(RAJA_ENABLE_CUDA)
#define RAJA_ALIGN_DATA(d)
#else
#define RAJA_ALIGN_DATA(d) __assume_aligned(d, DATA_ALIGN)
#endif
#define RAJA_ALIGNED_ATTR(N) alignas(N)


#elif defined(RAJA_COMPILER_IBM) 
//
// Configuration options for IBM (xl) compilers
//

#define RAJA_INLINE inline  __attribute__((always_inline))
#define RAJA_SIMD       RAJA_PRAGMA(simd_level(5))
#define RAJA_SIMDFORCE  RAJA_PRAGMA(simd_level(10))
#define RAJA_NOSIMD     RAJA_PRAGMA(simd_level(0))
#if defined(RAJA_ENABLE_CUDA)
#define RAJA_ALIGN_DATA(d)
#else
#define RAJA_ALIGN_DATA(d) __alignx(DATA_ALIGN, d)
#endif
#define RAJA_ALIGNED_ATTR(N) alignas(N)


#elif defined(RAJA_COMPILER_CLANG) 
//
// Configuration options for Clang compilers
//

#define RAJA_INLINE inline  __attribute__((always_inline))
#define RAJA_SIMD      RAJA_PRAGMA(clang loop vectorize(enable))
#define RAJA_SIMDFORCE 
#define RAJA_NOSIMD    RAJA_PRAGMA(clang loop vectorize(disable))
#if defined(RAJA_ENABLE_CUDA)
#define RAJA_ALIGN_DATA(d)
#else
#define RAJA_ALIGN_DATA(d)
#endif
//#define RAJA_ALIGNED_ATTR(N) __attribute__((align_value(N)))
#define RAJA_ALIGNED_ATTR(N) alignas(N)


#else  // No compiler defined

#pragma message("RAJA_COMPILER unknown, using default empty macros.")

#define RAJA_INLINE inline
#define RAJA_SIMD
#define RAJA_NOSIMD
#define RAJA_ALIGN_DATA(d)
#define RAJA_ALIGNED_ATTR(a)

#endif


}  // closing brace for RAJA namespace

#endif // closing endif for header file include guard
