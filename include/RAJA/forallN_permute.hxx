//AUTOGENERATED BY gen_forallN_permute.py

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2016, Lawrence Livermore National Security, LLC.
// 
// Produced at the Lawrence Livermore National Laboratory
// 
// LLNL-CODE-689114
// 
// All rights reserved.
// 
// This file is part of RAJA. 
// 
// For additional details, please also read raja/README-license.txt.
// 
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions are met:
// 
// * Redistributions of source code must retain the above copyright notice, 
//   this list of conditions and the disclaimer below.
// 
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the disclaimer (as noted below) in the
//   documentation and/or other materials provided with the distribution.
// 
// * Neither the name of the LLNS/LLNL nor the names of its contributors may
//   be used to endorse or promote products derived from this software without
//   specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL SECURITY,
// LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE LIABLE FOR ANY
// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL 
// DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
// OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
// HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
// STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
// IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
// POSSIBILITY OF SUCH DAMAGE.
// 
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

  
#ifndef RAJA_forallN_permute_HXX__
#define RAJA_forallN_permute_HXX__

#include "RAJA/forallN_permute_lf.hxx"

namespace RAJA {



template<typename BODY>
struct ForallN_Permute_Functor<PERM_IJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type j) const {
    body(i, j);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type i) const {
    body(i, j);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IJK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type j, Index_type k) const {
    body(i, j, k);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pj, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IKJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type k, Index_type j) const {
    body(i, j, k);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pk, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JIK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type i, Index_type k) const {
    body(i, j, k);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pi, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JKI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type k, Index_type i) const {
    body(i, j, k);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pk, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KIJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type i, Index_type j) const {
    body(i, j, k);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pi, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KJI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type j, Index_type i) const {
    body(i, j, k);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pj, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IJKL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type j, Index_type k, Index_type l) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pj, pk, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IJLK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type j, Index_type l, Index_type k) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pj, pl, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IKJL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type k, Index_type j, Index_type l) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pk, pj, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IKLJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type k, Index_type l, Index_type j) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pk, pl, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_ILJK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type l, Index_type j, Index_type k) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pl, pj, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_ILKJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type l, Index_type k, Index_type j) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pl, pk, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JIKL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type i, Index_type k, Index_type l) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pi, pk, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JILK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type i, Index_type l, Index_type k) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pi, pl, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JKIL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type k, Index_type i, Index_type l) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pk, pi, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JKLI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type k, Index_type l, Index_type i) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pk, pl, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JLIK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type l, Index_type i, Index_type k) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pl, pi, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JLKI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type l, Index_type k, Index_type i) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pl, pk, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KIJL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type i, Index_type j, Index_type l) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pi, pj, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KILJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type i, Index_type l, Index_type j) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pi, pl, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KJIL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type j, Index_type i, Index_type l) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pj, pi, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KJLI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type j, Index_type l, Index_type i) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pj, pl, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KLIJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type l, Index_type i, Index_type j) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pl, pi, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KLJI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type l, Index_type j, Index_type i) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pl, pj, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LIJK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type i, Index_type j, Index_type k) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pi, pj, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LIKJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type i, Index_type k, Index_type j) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pi, pk, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LJIK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type j, Index_type i, Index_type k) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pj, pi, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LJKI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type j, Index_type k, Index_type i) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pj, pk, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LKIJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type k, Index_type i, Index_type j) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pk, pi, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LKJI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type k, Index_type j, Index_type i) const {
    body(i, j, k, l);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pk, pj, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IJKLM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type j, Index_type k, Index_type l, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pj, pk, pl, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IJKML, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type j, Index_type k, Index_type m, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pj, pk, pm, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IJLKM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type j, Index_type l, Index_type k, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pj, pl, pk, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IJLMK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type j, Index_type l, Index_type m, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pj, pl, pm, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IJMKL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type j, Index_type m, Index_type k, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pj, pm, pk, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IJMLK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type j, Index_type m, Index_type l, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pj, pm, pl, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IKJLM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type k, Index_type j, Index_type l, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pk, pj, pl, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IKJML, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type k, Index_type j, Index_type m, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pk, pj, pm, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IKLJM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type k, Index_type l, Index_type j, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pk, pl, pj, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IKLMJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type k, Index_type l, Index_type m, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pk, pl, pm, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IKMJL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type k, Index_type m, Index_type j, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pk, pm, pj, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IKMLJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type k, Index_type m, Index_type l, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pk, pm, pl, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_ILJKM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type l, Index_type j, Index_type k, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pl, pj, pk, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_ILJMK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type l, Index_type j, Index_type m, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pl, pj, pm, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_ILKJM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type l, Index_type k, Index_type j, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pl, pk, pj, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_ILKMJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type l, Index_type k, Index_type m, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pl, pk, pm, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_ILMJK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type l, Index_type m, Index_type j, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pl, pm, pj, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_ILMKJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type l, Index_type m, Index_type k, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pl, pm, pk, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IMJKL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type m, Index_type j, Index_type k, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pm, pj, pk, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IMJLK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type m, Index_type j, Index_type l, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pm, pj, pl, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IMKJL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type m, Index_type k, Index_type j, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pm, pk, pj, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IMKLJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type m, Index_type k, Index_type l, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pm, pk, pl, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IMLJK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type m, Index_type l, Index_type j, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pm, pl, pj, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_IMLKJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type i, Index_type m, Index_type l, Index_type k, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pi, pm, pl, pk, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JIKLM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type i, Index_type k, Index_type l, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pi, pk, pl, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JIKML, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type i, Index_type k, Index_type m, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pi, pk, pm, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JILKM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type i, Index_type l, Index_type k, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pi, pl, pk, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JILMK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type i, Index_type l, Index_type m, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pi, pl, pm, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JIMKL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type i, Index_type m, Index_type k, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pi, pm, pk, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JIMLK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type i, Index_type m, Index_type l, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pi, pm, pl, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JKILM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type k, Index_type i, Index_type l, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pk, pi, pl, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JKIML, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type k, Index_type i, Index_type m, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pk, pi, pm, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JKLIM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type k, Index_type l, Index_type i, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pk, pl, pi, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JKLMI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type k, Index_type l, Index_type m, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pk, pl, pm, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JKMIL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type k, Index_type m, Index_type i, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pk, pm, pi, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JKMLI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type k, Index_type m, Index_type l, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pk, pm, pl, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JLIKM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type l, Index_type i, Index_type k, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pl, pi, pk, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JLIMK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type l, Index_type i, Index_type m, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pl, pi, pm, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JLKIM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type l, Index_type k, Index_type i, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pl, pk, pi, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JLKMI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type l, Index_type k, Index_type m, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pl, pk, pm, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JLMIK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type l, Index_type m, Index_type i, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pl, pm, pi, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JLMKI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type l, Index_type m, Index_type k, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pl, pm, pk, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JMIKL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type m, Index_type i, Index_type k, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pm, pi, pk, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JMILK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type m, Index_type i, Index_type l, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pm, pi, pl, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JMKIL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type m, Index_type k, Index_type i, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pm, pk, pi, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JMKLI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type m, Index_type k, Index_type l, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pm, pk, pl, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JMLIK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type m, Index_type l, Index_type i, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pm, pl, pi, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_JMLKI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type j, Index_type m, Index_type l, Index_type k, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pj, pm, pl, pk, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KIJLM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type i, Index_type j, Index_type l, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pi, pj, pl, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KIJML, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type i, Index_type j, Index_type m, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pi, pj, pm, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KILJM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type i, Index_type l, Index_type j, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pi, pl, pj, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KILMJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type i, Index_type l, Index_type m, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pi, pl, pm, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KIMJL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type i, Index_type m, Index_type j, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pi, pm, pj, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KIMLJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type i, Index_type m, Index_type l, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pi, pm, pl, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KJILM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type j, Index_type i, Index_type l, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pj, pi, pl, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KJIML, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type j, Index_type i, Index_type m, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pj, pi, pm, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KJLIM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type j, Index_type l, Index_type i, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pj, pl, pi, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KJLMI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type j, Index_type l, Index_type m, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pj, pl, pm, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KJMIL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type j, Index_type m, Index_type i, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pj, pm, pi, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KJMLI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type j, Index_type m, Index_type l, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pj, pm, pl, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KLIJM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type l, Index_type i, Index_type j, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pl, pi, pj, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KLIMJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type l, Index_type i, Index_type m, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pl, pi, pm, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KLJIM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type l, Index_type j, Index_type i, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pl, pj, pi, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KLJMI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type l, Index_type j, Index_type m, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pl, pj, pm, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KLMIJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type l, Index_type m, Index_type i, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pl, pm, pi, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KLMJI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type l, Index_type m, Index_type j, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pl, pm, pj, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KMIJL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type m, Index_type i, Index_type j, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pm, pi, pj, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KMILJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type m, Index_type i, Index_type l, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pm, pi, pl, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KMJIL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type m, Index_type j, Index_type i, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pm, pj, pi, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KMJLI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type m, Index_type j, Index_type l, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pm, pj, pl, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KMLIJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type m, Index_type l, Index_type i, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pm, pl, pi, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_KMLJI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type k, Index_type m, Index_type l, Index_type j, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pk, pm, pl, pj, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LIJKM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type i, Index_type j, Index_type k, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pi, pj, pk, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LIJMK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type i, Index_type j, Index_type m, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pi, pj, pm, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LIKJM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type i, Index_type k, Index_type j, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pi, pk, pj, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LIKMJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type i, Index_type k, Index_type m, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pi, pk, pm, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LIMJK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type i, Index_type m, Index_type j, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pi, pm, pj, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LIMKJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type i, Index_type m, Index_type k, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pi, pm, pk, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LJIKM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type j, Index_type i, Index_type k, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pj, pi, pk, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LJIMK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type j, Index_type i, Index_type m, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pj, pi, pm, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LJKIM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type j, Index_type k, Index_type i, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pj, pk, pi, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LJKMI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type j, Index_type k, Index_type m, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pj, pk, pm, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LJMIK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type j, Index_type m, Index_type i, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pj, pm, pi, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LJMKI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type j, Index_type m, Index_type k, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pj, pm, pk, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LKIJM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type k, Index_type i, Index_type j, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pk, pi, pj, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LKIMJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type k, Index_type i, Index_type m, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pk, pi, pm, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LKJIM, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type k, Index_type j, Index_type i, Index_type m) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pk, pj, pi, pm);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LKJMI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type k, Index_type j, Index_type m, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pk, pj, pm, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LKMIJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type k, Index_type m, Index_type i, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pk, pm, pi, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LKMJI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type k, Index_type m, Index_type j, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pk, pm, pj, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LMIJK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type m, Index_type i, Index_type j, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pm, pi, pj, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LMIKJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type m, Index_type i, Index_type k, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pm, pi, pk, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LMJIK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type m, Index_type j, Index_type i, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pm, pj, pi, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LMJKI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type m, Index_type j, Index_type k, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pm, pj, pk, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LMKIJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type m, Index_type k, Index_type i, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pm, pk, pi, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_LMKJI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type l, Index_type m, Index_type k, Index_type j, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pl, pm, pk, pj, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MIJKL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type i, Index_type j, Index_type k, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pi, pj, pk, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MIJLK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type i, Index_type j, Index_type l, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pi, pj, pl, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MIKJL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type i, Index_type k, Index_type j, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pi, pk, pj, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MIKLJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type i, Index_type k, Index_type l, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pi, pk, pl, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MILJK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type i, Index_type l, Index_type j, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pi, pl, pj, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MILKJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type i, Index_type l, Index_type k, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pi, pl, pk, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MJIKL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type j, Index_type i, Index_type k, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pj, pi, pk, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MJILK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type j, Index_type i, Index_type l, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pj, pi, pl, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MJKIL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type j, Index_type k, Index_type i, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pj, pk, pi, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MJKLI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type j, Index_type k, Index_type l, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pj, pk, pl, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MJLIK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type j, Index_type l, Index_type i, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pj, pl, pi, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MJLKI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type j, Index_type l, Index_type k, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pj, pl, pk, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MKIJL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type k, Index_type i, Index_type j, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pk, pi, pj, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MKILJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type k, Index_type i, Index_type l, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pk, pi, pl, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MKJIL, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type k, Index_type j, Index_type i, Index_type l) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pk, pj, pi, pl);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MKJLI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type k, Index_type j, Index_type l, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pk, pj, pl, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MKLIJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type k, Index_type l, Index_type i, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pk, pl, pi, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MKLJI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type k, Index_type l, Index_type j, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pk, pl, pj, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MLIJK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type l, Index_type i, Index_type j, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pl, pi, pj, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MLIKJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type l, Index_type i, Index_type k, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pl, pi, pk, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MLJIK, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type l, Index_type j, Index_type i, Index_type k) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pl, pj, pi, pk);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MLJKI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type l, Index_type j, Index_type k, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pl, pj, pk, pi);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MLKIJ, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type l, Index_type k, Index_type i, Index_type j) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pl, pk, pi, pj);
  }
  
  BODY body;
};

    

template<typename BODY>
struct ForallN_Permute_Functor<PERM_MLKJI, BODY>{

  RAJA_INLINE
  constexpr
  explicit ForallN_Permute_Functor(BODY const &b) : body(b) {}

  RAJA_SUPPRESS_HD_WARN  
  RAJA_INLINE
  RAJA_HOST_DEVICE 
  void operator()(Index_type m, Index_type l, Index_type k, Index_type j, Index_type i) const {
    body(i, j, k, l, m);
  }
  
  template<typename NextPolicy, typename TAG, typename PI, typename PJ, typename PK, typename PL, typename PM>
  RAJA_INLINE
  void callNextPolicy(PI const &pi, PJ const &pj, PK const &pk, PL const &pl, PM const &pm) const {
    forallN_policy<NextPolicy>(TAG(), *this, pm, pl, pk, pj, pi);
  }
  
  BODY body;
};

    


} // namespace RAJA
  
#endif

