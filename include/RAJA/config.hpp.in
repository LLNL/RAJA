/*!
 ******************************************************************************
 *
 * \file
 *
 * \brief   Header file for basic RAJA configuration options.
 *
 *          This file contains platform-specific parameters that control
 *          aspects of compilation of application code using RAJA. These
 *          parameters specify: SIMD unit width, data alignment information,
 *          inline directives, etc.
 *
 *          IMPORTANT: These options are set by CMake and depend on the options
 *          passed to it.
 *
 *          IMPORTANT: Exactly one e RAJA_COMPILER_* option must be defined to
 *          ensure correct behavior.
 *
 *          Definitions in this file will propagate to all RAJA header files.
 *
 ******************************************************************************
 */

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//
// Copyright (c) 2016-19, Lawrence Livermore National Security, LLC
// and RAJA project contributors. See the RAJA/COPYRIGHT file for details.
//
// SPDX-License-Identifier: (BSD-3-Clause)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//

#ifndef RAJA_config_HPP
#define RAJA_config_HPP

/*!
 ******************************************************************************
 *
 * \brief Enable/disable exploratory fault tolerance mechanism.
 *
 ******************************************************************************
 */
#cmakedefine ENABLE_FT

/*!
 ******************************************************************************
 *
 * \brief Default RAJA floating point scalar and pointer options.
 *
 ******************************************************************************
 */
#define @RAJA_FP@
#define @RAJA_PTR@

/*!
 ******************************************************************************
 *
 * \brief Deprecated tests
 *
 ******************************************************************************
 */
#cmakedefine RAJA_DEPRECATED_TESTS

/*!
 ******************************************************************************
 *
 * \brief Add forceinline recursive directive to Kernel and Forall (Intel only)
 *
 ******************************************************************************
 */
#cmakedefine ENABLE_FORCEINLINE_RECURSIVE

/*!
 ******************************************************************************
 *
 * \brief Add bounds check to views and layouts
 *
 ******************************************************************************
 */
#cmakedefine RAJA_ENABLE_BOUNDS_CHECK

/*!
 ******************************************************************************
 *
 * \brief Programming model back-ends, plus CHAI enable/disable.
 *
 ******************************************************************************
 */
#cmakedefine RAJA_ENABLE_OPENMP
#cmakedefine RAJA_ENABLE_TARGET_OPENMP
#cmakedefine RAJA_ENABLE_TBB
#cmakedefine RAJA_ENABLE_CUDA
#cmakedefine RAJA_ENABLE_CLANG_CUDA
#cmakedefine RAJA_ENABLE_CHAI

/*!
 ******************************************************************************
 *
 * \brief Timer options.
 *
 ******************************************************************************
 */
#cmakedefine RAJA_USE_CHRONO
#cmakedefine RAJA_USE_GETTIME
#cmakedefine RAJA_USE_CLOCK
#cmakedefine RAJA_USE_CYCLE

/*!
 ******************************************************************************
 *
 * \brief Detect the host C++ compiler we are using.
 *
 ******************************************************************************
 */
#if defined(__INTEL_COMPILER)
#define RAJA_COMPILER_INTEL
#elif defined(__ibmxl__)
#define RAJA_COMPILER_XLC
#elif defined(__clang__)
#define RAJA_COMPILER_CLANG
#elif defined(__PGI)
#define RAJA_COMPILER_PGI
#elif defined(_WIN32)
#define RAJA_COMPILER_MSVC
#elif defined(__GNUC__)
#define RAJA_COMPILER_GNU
#endif

#define RAJA_STRINGIFY(x) RAJA_DO_STRINGIFY(x)
#define RAJA_DO_STRINGIFY(x) #x
#ifdef _WIN32
#define RAJA_PRAGMA(x) __pragma(x)
#else
#define RAJA_PRAGMA(x) _Pragma(RAJA_STRINGIFY(x))
#endif

namespace RAJA {

#if defined(RAJA_ENABLE_OPENMP)
#if not defined(_OPENMP)
#error RAJA configured with ENABLE_OPENMP, but OpenMP not supported by current compiler 
#endif // _OPENMP
#endif // RAJA_ENABLE_OPENMP


/*!
 ******************************************************************************
 *
 * \brief RAJA software version number.
 *
 ******************************************************************************
 */
const int RAJA_VERSION_MAJOR = @RAJA_VERSION_MAJOR@;
const int RAJA_VERSION_MINOR = @RAJA_VERSION_MINOR@;
const int RAJA_VERSION_PATCHLEVEL = @RAJA_VERSION_PATCHLEVEL@;


/*!
 ******************************************************************************
 *
 * \brief Useful macros.
 *
 ******************************************************************************
 */

//
//  Platform-specific constants for range index set and data alignment:
//
//     RANGE_ALIGN - alignment of begin/end indices in range segments
//                   (i.e., starting index and length of range segments
//                    constructed by index set builder methods will
//                    be multiples of this value)
//
//     RANGE_MIN_LENGTH - used in index set builder methods
//                        as min length of range segments (an integer multiple
//                        of RANGE_ALIGN)
//
//     DATA_ALIGN - used in compiler-specific intrinsics and type aliases
//                  to specify alignment of data, loop bounds, etc.;
//                  units of "bytes"

const int RANGE_ALIGN = @RAJA_RANGE_ALIGN@;
const int RANGE_MIN_LENGTH = @RAJA_RANGE_MIN_LENGTH@;
const int DATA_ALIGN = @RAJA_DATA_ALIGN@;

#if defined (_WIN32)
#define RAJA_RESTRICT __restrict
#else
#define RAJA_RESTRICT __restrict__
#endif

//
// Runtime bounds checking for Views
//
#if defined(RAJA_ENABLE_BOUNDS_CHECK)
#define RAJA_BOUNDS_CHECK_INTERNAL
#define RAJA_BOUNDS_CHECK_constexpr

#if !defined(NDEBUG)
#define RAJA_ASSERT(EXP) assert( (EXP) )
#endif

//
//TODO: Once HIP is supported use asm("s_trap 2");
//      to halt HIP kernels.
//
#if defined(NDEBUG) && defined(__CUDA_ARCH__)
#define RAJA_ASSERT(EXP) asm ("trap;")
#endif

#if defined(NDEBUG) && !defined(__CUDA_ARCH__)
#define RAJA_ASSERT(EXP) abort();
#endif

#else
#define RAJA_BOUNDS_CHECK_constexpr constexpr
#define RAJA_ASSERT(EXP)
#endif

//
//  Compiler-specific definitions for inline directives, data alignment
//  intrinsics, and SIMD vector pragmas
//
//  Variables for compiler instrinsics, directives, type aliases
//
//     RAJA_INLINE - macro to enforce method inlining
//
//     RAJA_ALIGN_DATA(<variable>) - macro to express alignment of data,
//                              loop bounds, etc.
//
//     RAJA_SIMD - macro to express SIMD vectorization pragma to force
//                 loop vectorization
//
//     RAJA_ALIGNED_ATTR(<alignment>) - macro to express type or variable alignments
//

#ifdef _WIN32
#ifdef RAJASHAREDDLL_EXPORTS
#define RAJASHAREDDLL_API __declspec(dllexport)
#else
#define RAJASHAREDDLL_API __declspec(dllimport)
#endif
#else
#define RAJASHAREDDLL_API
#endif

#if defined(RAJA_COMPILER_GNU)
#define RAJA_ALIGNED_ATTR(N) __attribute__((aligned(N)))
#else
#define RAJA_ALIGNED_ATTR(N) alignas(N)
#endif


#if defined(RAJA_COMPILER_INTEL)
//
// Configuration options for Intel compilers
//

#if defined (ENABLE_FORCEINLINE_RECURSIVE)
#define RAJA_FORCEINLINE_RECURSIVE  RAJA_PRAGMA(forceinline recursive)
#else
#define RAJA_FORCEINLINE_RECURSIVE
#endif

#if defined (_WIN32)
#define RAJA_INLINE inline
#else
#define RAJA_INLINE inline  __attribute__((always_inline))
#endif

#if defined(RAJA_ENABLE_CUDA)
#define RAJA_ALIGN_DATA(d) d
#else
#define RAJA_ALIGN_DATA(d) __assume_aligned(d, RAJA::DATA_ALIGN)
#endif

#if defined(_OPENMP) && (_OPENMP >= 201307) && (__INTEL_COMPILER >= 1700)
#define RAJA_SIMD  RAJA_PRAGMA(omp simd)
#define RAJA_NO_SIMD RAJA_PRAGMA(novector)
#elif defined(_OPENMP) && (_OPENMP >= 201307) && (__INTEL_COMPILER < 1700)
#define RAJA_SIMD
#define RAJA_NO_SIMD RAJA_PRAGMA(novector)
#else
#define RAJA_SIMD RAJA_PRAGMA(simd)
#define RAJA_NO_SIMD RAJA_PRAGMA(novector)
#endif


#elif defined(RAJA_COMPILER_GNU)
//
// Configuration options for GNU compilers
//
#define RAJA_FORCEINLINE_RECURSIVE
#define RAJA_INLINE inline  __attribute__((always_inline))

#if defined(RAJA_ENABLE_CUDA)
#define RAJA_ALIGN_DATA(d) d
#else
#define RAJA_ALIGN_DATA(d) __builtin_assume_aligned(d, RAJA::DATA_ALIGN)
#endif

#if defined(_OPENMP) && (_OPENMP >= 201307)
#define RAJA_SIMD  RAJA_PRAGMA(omp simd)
#define RAJA_NO_SIMD 
#elif defined(__GNUC__) && defined(__GNUC_MINOR__) && \
      ( ( (__GNUC__ == 4) && (__GNUC_MINOR__ == 9) ) || (__GNUC__ >= 5) )
#define RAJA_SIMD    RAJA_PRAGMA(GCC ivdep)
#define RAJA_NO_SIMD 
#else
#define RAJA_SIMD
#define RAJA_NO_SIMD
#endif


#elif defined(RAJA_COMPILER_XLC)
//
// Configuration options for xlc compiler (i.e., bgq/sequoia).
//
#define RAJA_FORCEINLINE_RECURSIVE
#define RAJA_INLINE inline  __attribute__((always_inline))

// FIXME: alignx is breaking CUDA+xlc
#if defined(RAJA_ENABLE_CUDA)
#define RAJA_ALIGN_DATA(d) d
#else
#define RAJA_ALIGN_DATA(d) __alignx(RAJA::DATA_ALIGN, d)
#endif

#if defined(_OPENMP) && (_OPENMP >= 201307)
#define RAJA_SIMD  RAJA_PRAGMA(omp simd)
#define RAJA_NO_SIMD RAJA_PRAGMA(simd_level(0))
#else
#define RAJA_SIMD  RAJA_PRAGMA(simd_level(10))
#define RAJA_NO_SIMD RAJA_PRAGMA(simd_level(0))
#endif


#elif defined(RAJA_COMPILER_CLANG)
//
// Configuration options for clang compilers
//
#define RAJA_FORCEINLINE_RECURSIVE
#define RAJA_INLINE inline  __attribute__((always_inline))

// note that neither nvcc nor Apple Clang compiler currently doesn't support
// the __builtin_assume_aligned attribute
#if defined(RAJA_ENABLE_CUDA) || defined(__APPLE__)
#define RAJA_ALIGN_DATA(d) d
#else
#define RAJA_ALIGN_DATA(d) __builtin_assume_aligned(d, RAJA::DATA_ALIGN)
#endif

#if defined(_OPENMP) && (_OPENMP >= 201307) && (__clang_major__ >= 4 )
#define RAJA_SIMD  RAJA_PRAGMA(omp simd)
#define RAJA_NO_SIMD RAJA_PRAGMA(clang loop vectorize(disable))
#else

// Clang 3.7 and later changed the "pragma clang loop vectorize" options
// Apple Clang compiler supports older options
#if ( ( (__clang_major__ >= 4 ) ||  (__clang_major__ >= 3 && __clang_minor__ > 7) ) && !defined(__APPLE__) )
#define RAJA_SIMD    RAJA_PRAGMA(clang loop vectorize(assume_safety))
#else 
#define RAJA_SIMD    RAJA_PRAGMA(clang loop vectorize(enable))
#endif

#define RAJA_NO_SIMD  RAJA_PRAGMA(clang loop vectorize(disable))
#endif

#else

#pragma message("RAJA_COMPILER unknown, using default empty macros.")
#define RAJA_FORCEINLINE_RECURSIVE
#define RAJA_INLINE inline
#define RAJA_ALIGN_DATA(d) d
#define RAJA_SIMD
#define RAJA_NO_SIMD

#endif

#cmakedefine RAJA_HAVE_POSIX_MEMALIGN
#cmakedefine RAJA_HAVE_ALIGNED_ALLOC
#cmakedefine RAJA_HAVE_MM_MALLOC

//
//Creates a general framework for compiler alignment hints
//
// Example usage:
// double *a = RAJA::allocate_aligned_type<double>(RAJA::DATA_ALIGN,10*sizeof(double));
// double *y = RAJA::align_hint

template<typename T>
RAJA_INLINE
T * align_hint(T * x)
{

#if defined(RAJA_COMPILER_XLC) && defined(RAJA_ENABLE_CUDA)
  return x;
#elif defined(RAJA_COMPILER_INTEL) || defined(RAJA_COMPILER_XLC)
  RAJA_ALIGN_DATA(x);
  return x;
#else
  return static_cast<T *>(RAJA_ALIGN_DATA(x));
#endif
}
    
}  // closing brace for RAJA namespace

#endif // closing endif for header file include guard
