###############################################################################
# Copyright (c) 2016-25, Lawrence Livermore National Security, LLC and RADIUSS
# project contributors. See the RAJA/LICENSE file for details.
#
# SPDX-License-Identifier: (MIT)
###############################################################################

# The template job to test whether a machine is up.
# Expects CI_MACHINE defined to machine name.
.machine-check:
  stage: prerequisites
  tags: [shell, oslic]
  variables:
    GIT_STRATEGY: none
  script:
    - |
      if [[ $(jq '.[env.CI_MACHINE].total_nodes_up' /usr/global/tools/lorenz/data/loginnodeStatus) == 0 ]]
      then
        echo -e "\e[31mNo node available on ${CI_MACHINE}\e[0m"
        curl --url "https://api.github.com/repos/${GITHUB_PROJECT_ORG}/${GITHUB_PROJECT_NAME}/statuses/${CI_COMMIT_SHA}" \
             --header 'Content-Type: application/json' \
             --header "authorization: Bearer ${GITHUB_TOKEN}" \
             --data "{ \"state\": \"failure\", \"target_url\": \"${CI_PIPELINE_URL}\", \"description\": \"GitLab ${CI_MACHINE} down\", \"context\": \"ci/gitlab/${CI_MACHINE}\" }"
        exit 1
      fi

###
# Trigger a build-and-test pipeline for a machine.
# Comment the jobs for machines you do not need.
###

# One job to generate the job list for all the subpipelines
generate-job-lists:
  stage: prerequisites
  tags: [shell, oslic]
  variables:
    RADIUSS_JOBS_PATH: "scripts/radiuss-spack-configs/gitlab/radiuss-jobs"
    LOCAL_JOBS_PATH: ".gitlab/jobs"
  script:
    - cat ${RADIUSS_JOBS_PATH}/dane.yml ${LOCAL_JOBS_PATH}/dane.yml > dane-jobs.yml
    - cat ${RADIUSS_JOBS_PATH}/corona.yml ${LOCAL_JOBS_PATH}/corona.yml > corona-jobs.yml
    - cat ${RADIUSS_JOBS_PATH}/tioga.yml ${LOCAL_JOBS_PATH}/tioga.yml > tioga-jobs.yml
    - cat ${RADIUSS_JOBS_PATH}/tuolumne.yml ${LOCAL_JOBS_PATH}/tuolumne.yml > tuolumne-jobs.yml
  artifacts:
    paths:
      - dane-jobs.yml
      - corona-jobs.yml
      - tioga-jobs.yml
      - tuolumne-jobs.yml

# DANE
dane-up-check:
  variables:
    CI_MACHINE: "dane"
  extends: [.machine-check]
  rules:
    # Runs except if we explicitly deactivate dane by variable.
    - if: '$ON_DANE == "OFF"'
      when: never
    - when: on_success

dane-build-and-test:
  variables:
    CI_MACHINE: "dane"
  needs: [dane-up-check, generate-job-lists]
  extends: [.build-and-test]
  rules:
    # Runs except if we explicitly deactivate dane by variable.
    - if: '$ON_DANE == "OFF"'
      when: never
    - when: on_success

# MATRIX
matrix-up-check:
  variables:
    CI_MACHINE: "matrix"
  extends: [.machine-check]
  rules:
    # Runs except if we explicitly deactivate matrix by variable.
    - if: '$ON_MATRIX == "OFF"'
      when: never
    - when: on_success

matrix-build-and-test:
  variables:
    CI_MACHINE: "matrix"
  needs: [matrix-up-check]
  extends: [.build-and-test]
  rules:
    # Runs except if we explicitly deactivate matrix by variable.
    - if: '$ON_MATRIX == "OFF"'
      when: never
    - when: on_success

# CORONA
corona-up-check:
  variables:
    CI_MACHINE: "corona"
  extends: [.machine-check]
  rules:
    - if: '$ON_CORONA == "OFF"'
      when: never
    - when: on_success

corona-build-and-test:
  variables:
    CI_MACHINE: "corona"
  needs: [corona-up-check, generate-job-lists]
  extends: [.build-and-test]
  rules:
    - if: '$ON_CORONA == "OFF"'
      when: never
    - when: on_success

# TIOGA
tioga-up-check:
  variables:
    CI_MACHINE: "tioga"
  extends: [.machine-check]
  rules:
    - if: '$ON_TIOGA == "OFF"'
      when: never
    - when: on_success

tioga-build-and-test:
  variables:
    CI_MACHINE: "tioga"
  needs: [tioga-up-check, generate-job-lists]
  extends: [.build-and-test]
  rules:
    - if: '$ON_TIOGA == "OFF"'
      when: never
    - when: on_success

# TUOLUMNE
tuolumne-up-check:
  variables:
    CI_MACHINE: "tuolumne"
  extends: [.machine-check]
  rules:
    - if: '$ON_TUOLUMNE == "OFF"'
      when: never
    - when: on_success

tuolumne-build-and-test:
  variables:
    CI_MACHINE: "tuolumne"
  needs: [tuolumne-up-check, generate-job-lists]
  extends: [.build-and-test]
  rules:
    - if: '$ON_TUOLUMNE == "OFF"'
      when: never
    - when: on_success
